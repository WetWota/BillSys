package scam;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */



import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nathan
 */
public class BillingUI extends javax.swing.JFrame {
    /**
     * Creates new form BillingUI
     */
    
    private Product selectedProduct;
    private DefaultTableModel billingModel;
    private final List<Product> billDataList = new ArrayList<>();
    
    
    public BillingUI(DefaultTableModel model) {
        String[] columnNames = {"ID", "Product", "Price", "Quantity", "Total Price"};
        billingModel = new DefaultTableModel(new Object[0][5], columnNames); // Empty model
        initComponents();
        inventoryTable.setModel(model); // Set the model for the inventory table
        billTable.setModel(billingModel); // Set it to the billTable
        setColumnWidths(); // Set the model for the inventory table
        setTableAlignment();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        billPanel = new javax.swing.JPanel();
        billLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        CashField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        totalPane = new javax.swing.JTextPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        changePane = new javax.swing.JTextPane();
        enterButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cashier");

        inventoryTable.setModel(new DefaultTableModel());
        inventoryTable.setToolTipText("");
        inventoryTable.setShowGrid(true);
        inventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inventoryTable);
        inventoryTable.getAccessibleContext().setAccessibleName("");

        billPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        billLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        billLabel.setText("BILL");
        billLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        billTable.setModel(billingModel);
        billTable.setToolTipText("");
        billTable.setShowGrid(false);
        jScrollPane3.setViewportView(billTable);

        javax.swing.GroupLayout billPanelLayout = new javax.swing.GroupLayout(billPanel);
        billPanel.setLayout(billPanelLayout);
        billPanelLayout.setHorizontalGroup(
            billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billPanelLayout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(billLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(236, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        billPanelLayout.setVerticalGroup(
            billPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(billPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(billLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectedPane.setEditable(false);
        selectedPane.setToolTipText("");
        jScrollPane2.setViewportView(selectedPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        jLabel1.setText("total:");

        jLabel2.setText("cash:");

        jLabel3.setText("change:");

        totalPane.setEditable(false);
        jScrollPane6.setViewportView(totalPane);

        changePane.setEditable(false);
        jScrollPane7.setViewportView(changePane);

        enterButton.setText("Enter");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");

        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(40, 40, 40)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CashField)
                            .addComponent(jScrollPane6)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(billPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CashField)
                                .addComponent(enterButton)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public void billingModel() {
        // Convert the list of selected products to a 2D array
        Object[][] billData = new Object[billDataList.size()][5];
        
        for (int i = 0; i < billDataList.size(); i++) {
            Product product = billDataList.get(i);
            billData[i][0] = product.getId();
            billData[i][1] = product.getName();
            billData[i][2] = product.getPrice();
            billData[i][3] = product.getQuantity();
            billData[i][4] = product.getTotalPrice();
            
        }

        // Create the model and set it to the bill table
        billingModel.setDataVector(billData, new String[] {"ID","Product", "Price","Quantity","Total Price"});
        billTable.setModel(billingModel);
        
        }

    public Product findProductById(int id) {
        for (Product product : billDataList) {
            if (product.getId() == id) {
                return product; // Return the product if found
            }
        }
        return null; // Return null if not found
    }
    public void addProductToBill(Product newProduct) {
    // Check if the product already exists in the bill
        Product existingProduct = findProductById(newProduct.getId());

        if (existingProduct != null) {
            // Product already exists, increment the quantity
            existingProduct.setQuantity(existingProduct.getQuantity() + 1);
            existingProduct.setTotalPrice(existingProduct.getPrice() * existingProduct.getQuantity()); // Update total price
        } else {
            // Add the new product to the billDataList
            billDataList.add(newProduct);     
        }

        // Update the billing model to reflect the changes
        billingModel();

        JTextPane billPrice = totalPane;
            String billString = Double.toString(calculateTotalPrice());
            billPrice.setText("P " + billString);
    }
    
    public double calculateTotalPrice() {
    double totalPrice = 0.0; // Initialize total price

    // Iterate through the list of products
    for (Product product : billDataList) {
        totalPrice += product.getTotalPrice(); // Accumulate total price
    }

    return totalPrice; // Return the total price
}
    public double CalculateBalance(){
        double cash = Double.parseDouble(CashField.getText());
        return cash - calculateTotalPrice();
}
    public double Cash(){
        double cash = Double.parseDouble(CashField.getText());
        
        return cash;
    }
    
    private void inventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryTableMouseClicked
        int selectedRow = inventoryTable.getSelectedRow();
    
        if (selectedRow != -1) {
            // Retrieve data from the selected row
            int id = (Integer) inventoryTable.getValueAt(selectedRow, 4);
                Product existingProduct = findProductById(id);
                    if (existingProduct != null) {
                        existingProduct.setQuantity(existingProduct.getQuantity() + 1); // Increment quantity
                        existingProduct.setTotalPrice(existingProduct.getPrice() * existingProduct.getQuantity()); // Update total price
                     // Exit the method if you don't want to add it again
                        totalPane.setText("P " + Double.toString(calculateTotalPrice()));
                        
                        System.out.println("Incremented quantity for product ID: " + existingProduct.getId());
                        billingModel();
                     return;
                    }
            String productName = inventoryTable.getValueAt(selectedRow, 1).toString();
            String priceWithText = inventoryTable.getValueAt(selectedRow, 2).toString();
            double price = Double.parseDouble(priceWithText.split("P")[1]); // Extract numeric part
            int quantity = 1;

            // Create a Product object
            selectedProduct = new Product(id, productName, price, quantity);
            
            // Add to bill data list
            addProductToBill(selectedProduct);

            JTextPane selectTextPane = selectedPane;

            // Display the selected item's details
            System.out.print("ID:" + selectedProduct.getId() + " | ");
            System.out.print(selectedProduct.getName() + " | ");
            System.out.print("P " + selectedProduct.getPrice() + " | ");
            System.out.print(selectedProduct.getQuantity() + " pc\n");

            StringBuilder sb = new StringBuilder();
            sb.append("ID:").append(selectedProduct.getId()).append(" | ");
            sb.append(selectedProduct.getName()).append(" | ");
            sb.append("P ").append(selectedProduct.getPrice()).append(" |");
            sb.append(selectedProduct.getQuantity()).append(" pc");

            selectTextPane.setText(sb.toString());
        }
    }//GEN-LAST:event_inventoryTableMouseClicked

    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButtonActionPerformed
            JTextPane billChange = changePane;
        double balance = CalculateBalance();
        String changeString = Double.toString(balance);
        
        
        if (balance >= 0) {
            billChange.setText("P " + changeString);

            ReceiptFrame receiptFrame = new ReceiptFrame(billDataList, calculateTotalPrice(), 
                                                          Double.parseDouble(CashField.getText()), 
                                                          balance);
            receiptFrame.setVisible(true);


            /* //This part decreases the quantity of the product in CSV
            ProductManager productManager = new ProductManager("Data/product.csv");
            productManager.updateProductQuantitiesInCSV(billDataList);
                billingModel.fireTableDataChanged();  
                inventoryTable.repaint();*/
            // Clear the billDataList after the transaction is completed
            billDataList.clear(); 
            billingModel.setRowCount(0); 
            totalPane.setText("P 0.0"); 
            selectedPane.setText("");
            CashField.setText("");
    } else {
        // Existing code for handling insufficient cash
        showInsufficientCashDialog();
    }
    }//GEN-LAST:event_enterButtonActionPerformed

    
    private void showInsufficientCashDialog() {
    JFrame frame = new JFrame();
    changePane.setText("Invalid");
    JLabel label = new JLabel();
    
    frame.setTitle("Yes"); // Title
    frame.setVisible(true);  // make the window visible
    frame.getContentPane().setBackground(Color.gray); // set background color
    frame.add(label);
}
    
    private void setColumnWidths() {
        inventoryTable.getColumnModel().getColumn(0).setPreferredWidth(30); // Index column
        inventoryTable.getColumnModel().getColumn(1).setPreferredWidth(200); // Product column
        inventoryTable.getColumnModel().getColumn(2).setPreferredWidth(80);  // Price column
        inventoryTable.getColumnModel().getColumn(3).setPreferredWidth(80);  // Quantity column
        inventoryTable.getColumnModel().getColumn(4).setPreferredWidth(50);  // ID column
    }
    
    private void setTableAlignment() {
    DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    leftRenderer.setHorizontalAlignment(SwingConstants.LEFT); // Align text to the left
    centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

    // Assuming you have 4 columns
    inventoryTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // Index column
    inventoryTable.getColumnModel().getColumn(1).setCellRenderer(leftRenderer); // Product column
    inventoryTable.getColumnModel().getColumn(2).setCellRenderer(leftRenderer); // Price column
    inventoryTable.getColumnModel().getColumn(3).setCellRenderer(leftRenderer); // Quantity column
    inventoryTable.getColumnModel().getColumn(4).setCellRenderer(leftRenderer); // ID column
}
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CashField;
    private javax.swing.JLabel billLabel;
    private javax.swing.JPanel billPanel;
    private javax.swing.JTable billTable;
    private javax.swing.JTextPane changePane;
    private javax.swing.JButton enterButton;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane selectedPane;
    private javax.swing.JTextPane totalPane;
    // End of variables declaration//GEN-END:variables
}
